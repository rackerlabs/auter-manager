---
- hosts: all
  become: True
  gather_facts: False
  vars_prompt:
    name: "csv_file"
    prompt: "Enter config file (defaults to ./auter_config.csv)"
    default: "./auter_config.csv"
    private: no
  tasks:
    - name: Pre-check if server has configuration set in CSV file
      tags:
        - prechecks
      become: False
      changed_when: False
      local_action: command grep ^{{ inventory_hostname.split(':')[0] }}, {{ csv_file }}

    - name: Check if epel repo is present
      tags:
        - prechecks
        - auter
        - configsnap
      shell: time yum repolist | grep epel | wc -l
      register: epelPresent
      changed_when: False

    - name: add the rs-epel repo
      tags:
        - auter
        - configsnap
      failed_when: False
      register: result
      yum:
        name: rs-epel-release
        state: latest
      when: epelPresent.stdout|int == 0
      
    - name: add the epel repo
      tags:
        - auter
        - configsnap
      when: ( '"No Package" in result.msg' ) and epelPresent.stdout == 0
      yum:
        name: epel-release
        state: latest
      
    - name: install auter
      tags:
        - auter
      yum:
        name: auter
        state: latest

    - name: adjust the auter.conf file
      tags:
        - configure
      template:
        backup: yes
        src: auter.conf.j2
        dest: /etc/auter/auter.conf

    - name: add warning to not edit yum.conf exclude manually
      tags:
        - configure
      lineinfile:
        backup: yes
        line: "# WARNING: the excludes line is edited by auter_installer everytime it is run"
        insertbefore: "^exclude="
        dest: /etc/yum.conf

    - name: adjust the yum.conf excludes
      tags:
        - configure
      lineinfile:
        backup: yes
        dest: /etc/yum.conf
        state: present
        regexp: ^exclude
        line: exclude={{ lookup('csvfile', inventory_hostname.split(':')[0] + ' file=' + csv_file + ' col=1 delimiter=,') }}

    - name: Install configsnap
      tags:
        - configure
        - configsnap
      yum:
        name: configsnap
        state: latest

    - name: create configsnap pre apply script
      tags:
        - configure
        - configsnap
      lineinfile: 
        create: yes
        state: present
        dest: /etc/auter/pre-apply.d/01-configsnap-pre
        mode: 0755
        regexp: configsnap.*pre
        line: /usr/sbin/configsnap --silent -d /root -t auter-configsnap-$(date +%Y-%m-%d) -p pre
 
    - name: create configsnap post apply script
      tags:
        - configure
        - configsnap
      lineinfile: 
        create: yes
        state: present
        dest: /etc/auter/post-apply.d/50-configsnap-post-apply
        mode: 0755
        regexp: configsnap.*post-update
        line: /usr/sbin/configsnap -d /root -t auter-configsnap-$(date +%Y-%m-%d) -p post-update &> /root/auter-configsnap-$(date +%Y-%m-%d)/configsnap/post-update.compare

    - name: delete old configsnap pre reboot script if it exists
      tags:
        - configure
        - configsnap
      file:
        state: absent
        dest: /etc/auter/pre-reboot.d/99-configsnap-pre-reboot

    - name: create configsnap pre reboot script
      tags:
        - configure
        - configsnap
      no_log: true
      blockinfile:
        backup: no
        create: yes
        state: present
        mode: 0755
        marker: "# {mark} ANSIBLE MANAGED AUTER BLOCK"
        dest: /etc/auter/pre-reboot.d/98-configsnap-pre-reboot
        block: |2
            if find /root/auter-configsnap-$(date +%Y-%m-%d)/configsnap/ -name "*.pre" &>/dev/null; then
              exit 0
            else
              logger -p info -t auter "INFO: Configsnap pre-apply files missing, running $0 for post-reboot diff."
              /usr/sbin/configsnap --silent -d /root -t auter-configsnap-$(date +%Y-%m-%d) -p pre
              exit 0
            fi

    - name: create configsnap post reboot script
      tags:
        - configure
        - configsnap
      lineinfile: 
        create: yes
        state: present
        dest: /etc/auter/post-reboot.d/99-configsnap-post-reboot
        mode: 0755
        regexp: configsnap.*post-reboot
        line: '/usr/sbin/configsnap -d /root -t auter-configsnap-$(date +%Y-%m-%d) -p post-reboot &> /root/auter-configsnap-$(date +%Y-%m-%d)/configsnap/post-reboot.compare'

    - name: check auter status
      tags:
        - auter
      shell: "auter --status"
      register: auterStatus
      changed_when: False

    - name: enable auter
      tags:
        - auter
      command: auter --enable
      when: "'auter is currently enabled' not in auterStatus.stdout"

# This section can be used if you have nimbus installed and configured
    - name: Check if nimbus path is /opt/nimbus
      tags:
        - configure
        - numbus
      stat: path=/opt/nimbus/probes/system/logmon/logmon.cfg
      register: nimbus_details

    - name: set path variable to use /opt/nimbus
      tags:
        - configure
        - numbus
      set_fact:
        nimbus_path: "{{ nimbus_details.stat.path }}"
      when: nimbus_details.stat.exists == True

    - name: check if nimbus path is /opt/nimsoft
      tags:
        - configure
        - numbus
      stat: path=/opt/nimsoft/probes/system/logmon/logmon.cfg
      register: nimbus_details
      when: nimbus_path is not defined

    - name: set path variable to is /opt/nimsoft
      tags:
        - configure
        - numbus
      set_fact:
        nimbus_path: "{{ nimbus_details.stat.path }}"
      when: nimbus_details.stat.exists == True

    - name: Create nimbus monitors in "{{ nimbus_path }}"
      tags:
        - configure
        - numbus
      blockinfile:
        backup: yes
        insertbefore: "</profiles>"
        marker: "# {mark} ANSIBLE MANAGED AUTER BLOCK"
        dest: /opt/nimsoft/probes/system/logmon/logmon.cfg
        block: |2
             <auter_monitors>
                active = yes
                interval = 7 min
                scanfile = /var/log/messages
                scanmode = updates
                alarm = yes
                qos = yes
                message = no
                subject =
                <watchers>
                   <errors>
                      active = yes
                      match = /.*auter.*ERROR:.*/
                      level = critical
                      subsystemid =
                      message =
                      restrict =
                      expect = no
                      abort = no
                      sendclear = no
                      count = no
                      separator =
                      suppid = $WATCHER
                      source =
                      target =
                      qos =
                      runcommandonmatch = no
                      commandexecutable =
                      commandarguments =
                   </errors>
                   <warnings>
                      active = yes
                      match = /.*auter.*WARNING:.*/
                      level = critical
                      subsystemid =
                      message =
                      restrict =
                      expect = no
                      abort = no
                      sendclear = no
                      count = no
                      separator =
                      suppid = $WATCHER
                      source =
                      target =
                      qos =
                      runcommandonmatch = no
                      commandexecutable =
                      commandarguments =
                   </warnings>
                </watchers>
             </auter_monitors>
      register: nimbus_updated
      when: nimbus_path is defined

    - name: get number of nimbus processes
      tags:
        - configure
        - numbus
      shell: "ps aux | grep -c nimbus"
      register: nimbusProcessCountPre
      when: nimbus_path is defined and nimbus_updated.changed

    - name: restart nimbus
      tags:
        - configure
        - numbus
      failed_when: False
      service:
        enabled: yes
        name: nimbus
        state: restart
        pattern: nimbus(controller)
      when: nimbus_path is defined and nimbus_updated.changed
...
